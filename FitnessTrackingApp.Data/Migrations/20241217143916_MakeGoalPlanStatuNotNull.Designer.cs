// <auto-generated />
using System;
using FitnessTrackingApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FitnessTrackingApp.Data.Migrations
{
    [DbContext(typeof(FitnessTrackingAppDbContext))]
    [Migration("20241217143916_MakeGoalPlanStatuNotNull")]
    partial class MakeGoalPlanStatuNotNull
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FitnessTrackingApp.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("417ae2a4-ffbb-4e27-855e-d353004e0e91"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "98c74516-4b39-4766-ab54-3ab023c80545",
                            Email = "trainer@getfit.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TRAINER@GETFIT.COM",
                            NormalizedUserName = "TRAINER@GETFIT.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELgDoi5HDG8Pug6HCYSQo6/+SA6L54OY4AGwUyjd0USCYX57uHHIIiuFLC3bJxuafA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4JZZ3RICHGHZ3WDZWHJICS76QRJAESPV",
                            TwoFactorEnabled = false,
                            UserName = "trainer@getfit.com"
                        },
                        new
                        {
                            Id = new Guid("e61ce637-3ba1-44a2-8c05-b7c0595c3e5b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7543529c-09f9-40c0-bb37-2b954bdaa8e9",
                            Email = "trainer2@getfit.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TRAINER2@GETFIT.COM",
                            NormalizedUserName = "TRAINER2@GETFIT.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKi4X8jlIeKb2Ks+WTYxDzXEtjWoEEUxXkHQwV4gNQ4Y55lp3v9e73xxGJRC82dC6A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3AYQOQVOUTYD57DGY46IMWFVAQFC7BXE",
                            TwoFactorEnabled = false,
                            UserName = "trainer2@getfit.com"
                        },
                        new
                        {
                            Id = new Guid("cba94579-9df9-4cda-bf3e-ff5f51048d4b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c775ffd6-41f9-4a03-a3d1-b6202771b3bd",
                            Email = "trainer3@getfit.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TRAINER3@GETFIT.COM",
                            NormalizedUserName = "TRAINER3@GETFIT.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEM091clNOAmxwsYSHkdKdFrIX9VqVNOlisCtHCMQsHrCwjO8n3FkR/aTOzjO7U39rA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "PS3NQ5SUDKLIPXVZUOLB2WUVYWSCGT4B",
                            TwoFactorEnabled = false,
                            UserName = "trainer3@getfit.com"
                        },
                        new
                        {
                            Id = new Guid("90162da5-8408-493a-8dae-99995094cf09"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2564023e-9496-46cf-9085-07d8ab1bbacc",
                            Email = "trainer4@getfit.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TRAINER4@GETFIT.COM",
                            NormalizedUserName = "TRAINER4@GETFIT.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAED2P7oQH2z6h/CMWDPHngCMirJN+RM3sCXtpmUdMSkRd2HzDYMyxw1Vnu0/ynO1BHA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "CPRDG6HRGDF2RZSL25ZQTAQN6CCFN3OU",
                            TwoFactorEnabled = false,
                            UserName = "trainer4@getfit.com"
                        },
                        new
                        {
                            Id = new Guid("b0209e85-b41c-472b-a767-037253b72665"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c2c69c7c-654c-4b4a-bf71-e058e50e9b83",
                            Email = "trainer5@getfit.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TRAINER5@GETFIT.COM",
                            NormalizedUserName = "TRAINER5@GETFIT.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBlaW8OGa3wuT5fTPou0rvz6TpIbQo8fuiXX64BxjqQDguHMTGANK8dsSA2yotbUig==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "KLUU7OY42MOI2B6YKLLUTT5KTZX5P4SN",
                            TwoFactorEnabled = false,
                            UserName = "trainer5@getfit.com"
                        },
                        new
                        {
                            Id = new Guid("93a51770-ad3d-4d2c-8ec9-87d500d1b713"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c035152b-b55f-403d-ba3e-70b339c68f23",
                            Email = "admin@getfit.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GETFIT.COM",
                            NormalizedUserName = "ADMIN@GETFIT.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBC45dsFm0ECylQOM9W7nso0B7mQTTQnZyY1ZPiVZkLCj8f2pn7zHAutjf30zz4duA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "KWLDFGGAHH2FVG4LKU6VYF6DTO5HF6XQ",
                            TwoFactorEnabled = false,
                            UserName = "admin@getfit.com"
                        },
                        new
                        {
                            Id = new Guid("998cd43d-18c0-45a1-8945-ad10a045879c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "662e72ea-c981-435d-8945-a51634600ac2",
                            Email = "customer@getfit.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER@GETFIT.COM",
                            NormalizedUserName = "CUSTOMER@GETFIT.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEGajbY5tkobSYD+nF2Gg7/r5/1jfdmmZ9EwiLi8CuuoEBPjTLnUK4NKkgukS1WMug==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "XSQNL6UP4MS75TOZ6ZSUU2KWLYQ544CH",
                            TwoFactorEnabled = false,
                            UserName = "customer@getfit.com"
                        });
                });

            modelBuilder.Entity("FitnessTrackingApp.Data.Models.BodyWeightGoal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("GoalWeight")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BodyWeightGoals");
                });

            modelBuilder.Entity("FitnessTrackingApp.Data.Models.BodyWeightLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("CurrentWeight")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("DateLogged")
                        .HasColumnType("datetime2");

                    b.Property<long>("WeeklyPlanId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("WeeklyPlanId");

                    b.HasIndex("DateLogged", "WeeklyPlanId")
                        .IsUnique();

                    b.ToTable("BodyWeightLogs");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CurrentWeight = 93.4m,
                            DateLogged = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CurrentWeight = 93.2m,
                            DateLogged = new DateTime(2024, 12, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            CurrentWeight = 93m,
                            DateLogged = new DateTime(2024, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            CurrentWeight = 92.8m,
                            DateLogged = new DateTime(2024, 12, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            CurrentWeight = 92.6m,
                            DateLogged = new DateTime(2024, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 1L
                        },
                        new
                        {
                            Id = 6L,
                            CurrentWeight = 92.4m,
                            DateLogged = new DateTime(2024, 12, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 1L
                        },
                        new
                        {
                            Id = 7L,
                            CurrentWeight = 92.1m,
                            DateLogged = new DateTime(2024, 12, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 1L
                        },
                        new
                        {
                            Id = 8L,
                            CurrentWeight = 91.7m,
                            DateLogged = new DateTime(2024, 12, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 1L
                        },
                        new
                        {
                            Id = 9L,
                            CurrentWeight = 91.4m,
                            DateLogged = new DateTime(2024, 12, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 2L
                        },
                        new
                        {
                            Id = 10L,
                            CurrentWeight = 91.4m,
                            DateLogged = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 2L
                        },
                        new
                        {
                            Id = 11L,
                            CurrentWeight = 91.1m,
                            DateLogged = new DateTime(2024, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 2L
                        },
                        new
                        {
                            Id = 12L,
                            CurrentWeight = 89.7m,
                            DateLogged = new DateTime(2024, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 2L
                        },
                        new
                        {
                            Id = 13L,
                            CurrentWeight = 89.7m,
                            DateLogged = new DateTime(2024, 12, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 2L
                        },
                        new
                        {
                            Id = 14L,
                            CurrentWeight = 89.6m,
                            DateLogged = new DateTime(2024, 12, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 2L
                        },
                        new
                        {
                            Id = 15L,
                            CurrentWeight = 89.5m,
                            DateLogged = new DateTime(2024, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 2L
                        },
                        new
                        {
                            Id = 16L,
                            CurrentWeight = 90m,
                            DateLogged = new DateTime(2024, 12, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 2L
                        },
                        new
                        {
                            Id = 17L,
                            CurrentWeight = 89.8m,
                            DateLogged = new DateTime(2024, 12, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 3L
                        },
                        new
                        {
                            Id = 18L,
                            CurrentWeight = 89.8m,
                            DateLogged = new DateTime(2024, 12, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 3L
                        },
                        new
                        {
                            Id = 19L,
                            CurrentWeight = 89.6m,
                            DateLogged = new DateTime(2024, 12, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 3L
                        },
                        new
                        {
                            Id = 20L,
                            CurrentWeight = 89.5m,
                            DateLogged = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 3L
                        },
                        new
                        {
                            Id = 21L,
                            CurrentWeight = 89.4m,
                            DateLogged = new DateTime(2024, 12, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 3L
                        },
                        new
                        {
                            Id = 22L,
                            CurrentWeight = 89.3m,
                            DateLogged = new DateTime(2024, 12, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 3L
                        },
                        new
                        {
                            Id = 23L,
                            CurrentWeight = 89.4m,
                            DateLogged = new DateTime(2024, 12, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 3L
                        },
                        new
                        {
                            Id = 24L,
                            CurrentWeight = 89.4m,
                            DateLogged = new DateTime(2024, 12, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 3L
                        },
                        new
                        {
                            Id = 25L,
                            CurrentWeight = 89.2m,
                            DateLogged = new DateTime(2025, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 4L
                        },
                        new
                        {
                            Id = 26L,
                            CurrentWeight = 89m,
                            DateLogged = new DateTime(2025, 1, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 4L
                        },
                        new
                        {
                            Id = 27L,
                            CurrentWeight = 89m,
                            DateLogged = new DateTime(2025, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 4L
                        },
                        new
                        {
                            Id = 28L,
                            CurrentWeight = 88.8m,
                            DateLogged = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 4L
                        },
                        new
                        {
                            Id = 29L,
                            CurrentWeight = 88.8m,
                            DateLogged = new DateTime(2025, 1, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 4L
                        },
                        new
                        {
                            Id = 30L,
                            CurrentWeight = 88.6m,
                            DateLogged = new DateTime(2025, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 4L
                        },
                        new
                        {
                            Id = 31L,
                            CurrentWeight = 88.5m,
                            DateLogged = new DateTime(2025, 1, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 4L
                        },
                        new
                        {
                            Id = 32L,
                            CurrentWeight = 88.4m,
                            DateLogged = new DateTime(2025, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 4L
                        },
                        new
                        {
                            Id = 33L,
                            CurrentWeight = 88.4m,
                            DateLogged = new DateTime(2025, 1, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 5L
                        },
                        new
                        {
                            Id = 34L,
                            CurrentWeight = 88.2m,
                            DateLogged = new DateTime(2025, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 5L
                        },
                        new
                        {
                            Id = 35L,
                            CurrentWeight = 88.2m,
                            DateLogged = new DateTime(2025, 1, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 5L
                        },
                        new
                        {
                            Id = 36L,
                            CurrentWeight = 88m,
                            DateLogged = new DateTime(2025, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 5L
                        },
                        new
                        {
                            Id = 37L,
                            CurrentWeight = 88m,
                            DateLogged = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 5L
                        },
                        new
                        {
                            Id = 38L,
                            CurrentWeight = 87.9m,
                            DateLogged = new DateTime(2025, 1, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 5L
                        },
                        new
                        {
                            Id = 39L,
                            CurrentWeight = 87.8m,
                            DateLogged = new DateTime(2025, 1, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 5L
                        },
                        new
                        {
                            Id = 40L,
                            CurrentWeight = 87.5m,
                            DateLogged = new DateTime(2025, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 5L
                        },
                        new
                        {
                            Id = 41L,
                            CurrentWeight = 87.3m,
                            DateLogged = new DateTime(2025, 1, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 6L
                        },
                        new
                        {
                            Id = 42L,
                            CurrentWeight = 87.1m,
                            DateLogged = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 6L
                        },
                        new
                        {
                            Id = 43L,
                            CurrentWeight = 87.1m,
                            DateLogged = new DateTime(2025, 1, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 6L
                        },
                        new
                        {
                            Id = 44L,
                            CurrentWeight = 87m,
                            DateLogged = new DateTime(2025, 1, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 6L
                        },
                        new
                        {
                            Id = 45L,
                            CurrentWeight = 86.6m,
                            DateLogged = new DateTime(2025, 1, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 6L
                        },
                        new
                        {
                            Id = 46L,
                            CurrentWeight = 86.8m,
                            DateLogged = new DateTime(2025, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 6L
                        },
                        new
                        {
                            Id = 47L,
                            CurrentWeight = 86.7m,
                            DateLogged = new DateTime(2025, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 6L
                        },
                        new
                        {
                            Id = 48L,
                            CurrentWeight = 86.5m,
                            DateLogged = new DateTime(2025, 1, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 6L
                        },
                        new
                        {
                            Id = 49L,
                            CurrentWeight = 86.3m,
                            DateLogged = new DateTime(2025, 1, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 7L
                        },
                        new
                        {
                            Id = 50L,
                            CurrentWeight = 86.1m,
                            DateLogged = new DateTime(2025, 1, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 7L
                        },
                        new
                        {
                            Id = 51L,
                            CurrentWeight = 86m,
                            DateLogged = new DateTime(2025, 1, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 7L
                        },
                        new
                        {
                            Id = 52L,
                            CurrentWeight = 86m,
                            DateLogged = new DateTime(2025, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 7L
                        },
                        new
                        {
                            Id = 53L,
                            CurrentWeight = 85.8m,
                            DateLogged = new DateTime(2025, 1, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 7L
                        },
                        new
                        {
                            Id = 54L,
                            CurrentWeight = 85.7m,
                            DateLogged = new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 7L
                        },
                        new
                        {
                            Id = 55L,
                            CurrentWeight = 85.6m,
                            DateLogged = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 7L
                        },
                        new
                        {
                            Id = 56L,
                            CurrentWeight = 85.5m,
                            DateLogged = new DateTime(2025, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 7L
                        },
                        new
                        {
                            Id = 57L,
                            CurrentWeight = 85.3m,
                            DateLogged = new DateTime(2025, 2, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 8L
                        },
                        new
                        {
                            Id = 58L,
                            CurrentWeight = 85.7m,
                            DateLogged = new DateTime(2025, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 8L
                        },
                        new
                        {
                            Id = 59L,
                            CurrentWeight = 85.1m,
                            DateLogged = new DateTime(2025, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 8L
                        },
                        new
                        {
                            Id = 60L,
                            CurrentWeight = 85m,
                            DateLogged = new DateTime(2025, 2, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 8L
                        },
                        new
                        {
                            Id = 61L,
                            CurrentWeight = 84.8m,
                            DateLogged = new DateTime(2025, 2, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 8L
                        },
                        new
                        {
                            Id = 62L,
                            CurrentWeight = 84.8m,
                            DateLogged = new DateTime(2025, 2, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 8L
                        },
                        new
                        {
                            Id = 63L,
                            CurrentWeight = 84.8m,
                            DateLogged = new DateTime(2025, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 8L
                        },
                        new
                        {
                            Id = 64L,
                            CurrentWeight = 84.7m,
                            DateLogged = new DateTime(2025, 2, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 8L
                        },
                        new
                        {
                            Id = 65L,
                            CurrentWeight = 84.7m,
                            DateLogged = new DateTime(2025, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 9L
                        },
                        new
                        {
                            Id = 66L,
                            CurrentWeight = 84.7m,
                            DateLogged = new DateTime(2025, 2, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 9L
                        },
                        new
                        {
                            Id = 67L,
                            CurrentWeight = 84.7m,
                            DateLogged = new DateTime(2025, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 9L
                        },
                        new
                        {
                            Id = 68L,
                            CurrentWeight = 84.4m,
                            DateLogged = new DateTime(2025, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 9L
                        },
                        new
                        {
                            Id = 69L,
                            CurrentWeight = 84.2m,
                            DateLogged = new DateTime(2025, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 9L
                        },
                        new
                        {
                            Id = 70L,
                            CurrentWeight = 84.2m,
                            DateLogged = new DateTime(2025, 2, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 9L
                        },
                        new
                        {
                            Id = 71L,
                            CurrentWeight = 84m,
                            DateLogged = new DateTime(2025, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 9L
                        },
                        new
                        {
                            Id = 72L,
                            CurrentWeight = 83.8m,
                            DateLogged = new DateTime(2025, 2, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 9L
                        },
                        new
                        {
                            Id = 73L,
                            CurrentWeight = 83.7m,
                            DateLogged = new DateTime(2025, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 10L
                        },
                        new
                        {
                            Id = 74L,
                            CurrentWeight = 83.7m,
                            DateLogged = new DateTime(2025, 2, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 10L
                        },
                        new
                        {
                            Id = 75L,
                            CurrentWeight = 83.6m,
                            DateLogged = new DateTime(2025, 2, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 10L
                        },
                        new
                        {
                            Id = 76L,
                            CurrentWeight = 83.8m,
                            DateLogged = new DateTime(2025, 2, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 10L
                        },
                        new
                        {
                            Id = 77L,
                            CurrentWeight = 83.4m,
                            DateLogged = new DateTime(2025, 2, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 10L
                        },
                        new
                        {
                            Id = 78L,
                            CurrentWeight = 83.4m,
                            DateLogged = new DateTime(2025, 2, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 10L
                        },
                        new
                        {
                            Id = 79L,
                            CurrentWeight = 83.3m,
                            DateLogged = new DateTime(2025, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 10L
                        },
                        new
                        {
                            Id = 80L,
                            CurrentWeight = 83m,
                            DateLogged = new DateTime(2025, 2, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeeklyPlanId = 10L
                        });
                });

            modelBuilder.Entity("FitnessTrackingApp.Data.Models.CardioSession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Calories")
                        .HasColumnType("int");

                    b.Property<bool>("IsHIIT")
                        .HasColumnType("bit");

                    b.Property<int>("SessionsPerWeek")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CardioSessions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Calories = 300,
                            IsHIIT = false,
                            SessionsPerWeek = 1
                        },
                        new
                        {
                            Id = 2L,
                            Calories = 300,
                            IsHIIT = false,
                            SessionsPerWeek = 2
                        },
                        new
                        {
                            Id = 3L,
                            Calories = 300,
                            IsHIIT = false,
                            SessionsPerWeek = 2
                        },
                        new
                        {
                            Id = 4L,
                            Calories = 300,
                            IsHIIT = false,
                            SessionsPerWeek = 3
                        },
                        new
                        {
                            Id = 5L,
                            Calories = 300,
                            IsHIIT = false,
                            SessionsPerWeek = 3
                        },
                        new
                        {
                            Id = 6L,
                            Calories = 300,
                            IsHIIT = false,
                            SessionsPerWeek = 3
                        },
                        new
                        {
                            Id = 7L,
                            Calories = 300,
                            IsHIIT = false,
                            SessionsPerWeek = 4
                        },
                        new
                        {
                            Id = 8L,
                            Calories = 300,
                            IsHIIT = false,
                            SessionsPerWeek = 4
                        },
                        new
                        {
                            Id = 9L,
                            Calories = 300,
                            IsHIIT = true,
                            SessionsPerWeek = 4
                        },
                        new
                        {
                            Id = 10L,
                            Calories = 300,
                            IsHIIT = true,
                            SessionsPerWeek = 4
                        });
                });

            modelBuilder.Entity("FitnessTrackingApp.Data.Models.CustomerDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AdditionalNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<long>("GoalPlanId")
                        .HasColumnType("bigint");

                    b.Property<int>("GoalType")
                        .HasColumnType("int");

                    b.Property<decimal>("StartingWeight")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("TargetWeight")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.HasIndex("GoalPlanId")
                        .IsUnique();

                    b.ToTable("CustomerDetails");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AdditionalNotes = "I am back for more - more motivated than ever to get leaner and stronger.",
                            DateCreated = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GoalPlanId = 1L,
                            GoalType = 0,
                            StartingWeight = 93m,
                            TargetWeight = 78m
                        },
                        new
                        {
                            Id = 2L,
                            AdditionalNotes = "The last session was great, but I think I am able to cut down more and get in better shape.",
                            DateCreated = new DateTime(2024, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GoalPlanId = 2L,
                            GoalType = 0,
                            StartingWeight = 102m,
                            TargetWeight = 90m
                        },
                        new
                        {
                            Id = 3L,
                            AdditionalNotes = "Having hypothyroidism I started to realize I was gaining weight easier than before and not the good kind of weight wither. With the help of Matt the focus was to stay active, hit my macros on a daily basis and the change will come. I wasn't perfect but I was able to go down in weight and was able to fit on my old clothes that haven't been able to wear in 2 years. Staying consistent, active and still eating the things I love, made it very enjoyable for me. I am extremely happy of my progress and have re-found my confidence I was missing.",
                            DateCreated = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GoalPlanId = 3L,
                            GoalType = 0,
                            StartingWeight = 113m,
                            TargetWeight = 110m
                        },
                        new
                        {
                            Id = 4L,
                            AdditionalNotes = "I need to loose some weight. I have a condition called hypothyroidism and over the past years I gained a lot of weight. I am ready to do whatever it takes to loose that weight fast!",
                            DateCreated = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GoalPlanId = 4L,
                            GoalType = 0,
                            StartingWeight = 123m,
                            TargetWeight = 78m
                        },
                        new
                        {
                            Id = 5L,
                            AdditionalNotes = "",
                            DateCreated = new DateTime(2024, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GoalPlanId = 5L,
                            GoalType = 0,
                            StartingWeight = 123m,
                            TargetWeight = 110m
                        },
                        new
                        {
                            Id = 6L,
                            AdditionalNotes = "",
                            DateCreated = new DateTime(2024, 2, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GoalPlanId = 6L,
                            GoalType = 0,
                            StartingWeight = 132m,
                            TargetWeight = 124m
                        });
                });

            modelBuilder.Entity("FitnessTrackingApp.Data.Models.GoalPlan", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("CurrentWeight")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GoalPlanStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("GoalType")
                        .HasColumnType("int");

                    b.Property<decimal>("GoalWeigh")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TrainerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TrainerId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[GoalPlanStatus] = 0");

                    b.ToTable("GoalPlans");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CurrentWeight = 93m,
                            EndDate = new DateTime(2025, 2, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GoalPlanStatus = 1,
                            GoalType = 0,
                            GoalWeigh = 78m,
                            StartDate = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TrainerId = new Guid("d8da2c4e-44f5-427d-b6f5-0dccfa1e2a46"),
                            UserId = new Guid("998cd43d-18c0-45a1-8945-ad10a045879c")
                        },
                        new
                        {
                            Id = 2L,
                            CurrentWeight = 102m,
                            EndDate = new DateTime(2024, 11, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GoalPlanStatus = 3,
                            GoalType = 0,
                            GoalWeigh = 90m,
                            StartDate = new DateTime(2024, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TrainerId = new Guid("d8da2c4e-44f5-427d-b6f5-0dccfa1e2a46"),
                            UserId = new Guid("998cd43d-18c0-45a1-8945-ad10a045879c")
                        },
                        new
                        {
                            Id = 3L,
                            CurrentWeight = 113m,
                            EndDate = new DateTime(2024, 10, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GoalPlanStatus = 3,
                            GoalType = 0,
                            GoalWeigh = 100m,
                            StartDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TrainerId = new Guid("d8da2c4e-44f5-427d-b6f5-0dccfa1e2a46"),
                            UserId = new Guid("998cd43d-18c0-45a1-8945-ad10a045879c")
                        },
                        new
                        {
                            Id = 4L,
                            CurrentWeight = 123m,
                            EndDate = new DateTime(2024, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GoalPlanStatus = 2,
                            GoalType = 0,
                            GoalWeigh = 78m,
                            RejectionReason = "The desired weight loss for that period is not achievable. Let's do something realistic.",
                            StartDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TrainerId = new Guid("d8da2c4e-44f5-427d-b6f5-0dccfa1e2a46"),
                            UserId = new Guid("998cd43d-18c0-45a1-8945-ad10a045879c")
                        },
                        new
                        {
                            Id = 5L,
                            CurrentWeight = 123m,
                            EndDate = new DateTime(2024, 6, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GoalPlanStatus = 4,
                            GoalType = 0,
                            GoalWeigh = 110m,
                            StartDate = new DateTime(2024, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TrainerId = new Guid("d8da2c4e-44f5-427d-b6f5-0dccfa1e2a46"),
                            UserId = new Guid("998cd43d-18c0-45a1-8945-ad10a045879c")
                        },
                        new
                        {
                            Id = 6L,
                            CurrentWeight = 132m,
                            EndDate = new DateTime(2024, 3, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GoalPlanStatus = 4,
                            GoalType = 0,
                            GoalWeigh = 124m,
                            StartDate = new DateTime(2024, 2, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TrainerId = new Guid("d8da2c4e-44f5-427d-b6f5-0dccfa1e2a46"),
                            UserId = new Guid("998cd43d-18c0-45a1-8945-ad10a045879c")
                        });
                });

            modelBuilder.Entity("FitnessTrackingApp.Data.Models.Macro", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("DailyCarbohydrates")
                        .HasColumnType("int");

                    b.Property<int>("DailyFat")
                        .HasColumnType("int");

                    b.Property<int>("DailyProtein")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Macros");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DailyCarbohydrates = 225,
                            DailyFat = 55,
                            DailyProtein = 190
                        },
                        new
                        {
                            Id = 2L,
                            DailyCarbohydrates = 250,
                            DailyFat = 55,
                            DailyProtein = 190
                        },
                        new
                        {
                            Id = 3L,
                            DailyCarbohydrates = 250,
                            DailyFat = 55,
                            DailyProtein = 190
                        },
                        new
                        {
                            Id = 4L,
                            DailyCarbohydrates = 250,
                            DailyFat = 55,
                            DailyProtein = 190
                        },
                        new
                        {
                            Id = 5L,
                            DailyCarbohydrates = 250,
                            DailyFat = 55,
                            DailyProtein = 190
                        },
                        new
                        {
                            Id = 6L,
                            DailyCarbohydrates = 250,
                            DailyFat = 55,
                            DailyProtein = 190
                        },
                        new
                        {
                            Id = 7L,
                            DailyCarbohydrates = 250,
                            DailyFat = 55,
                            DailyProtein = 190
                        },
                        new
                        {
                            Id = 8L,
                            DailyCarbohydrates = 225,
                            DailyFat = 50,
                            DailyProtein = 180
                        },
                        new
                        {
                            Id = 9L,
                            DailyCarbohydrates = 225,
                            DailyFat = 50,
                            DailyProtein = 180
                        },
                        new
                        {
                            Id = 10L,
                            DailyCarbohydrates = 225,
                            DailyFat = 50,
                            DailyProtein = 180
                        });
                });

            modelBuilder.Entity("FitnessTrackingApp.Data.Models.Trainer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AverageRating")
                        .HasColumnType("float");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("YearsOfExperience")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Trainers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d8da2c4e-44f5-427d-b6f5-0dccfa1e2a46"),
                            AverageRating = 6.4000000000000004,
                            IsAvailable = true,
                            UserId = new Guid("417ae2a4-ffbb-4e27-855e-d353004e0e91"),
                            YearsOfExperience = 7
                        },
                        new
                        {
                            Id = new Guid("ec163c02-6fdd-4e66-bec7-a1418a2fe85a"),
                            AverageRating = 8.1999999999999993,
                            IsAvailable = true,
                            UserId = new Guid("e61ce637-3ba1-44a2-8c05-b7c0595c3e5b"),
                            YearsOfExperience = 12
                        },
                        new
                        {
                            Id = new Guid("d6644f7d-214a-4295-a971-7b065bd5c5ac"),
                            AverageRating = 3.8999999999999999,
                            IsAvailable = true,
                            UserId = new Guid("cba94579-9df9-4cda-bf3e-ff5f51048d4b"),
                            YearsOfExperience = 4
                        },
                        new
                        {
                            Id = new Guid("df3e0b57-1b43-497a-87d0-97a34ba21c92"),
                            AverageRating = 2.2000000000000002,
                            IsAvailable = false,
                            UserId = new Guid("90162da5-8408-493a-8dae-99995094cf09"),
                            YearsOfExperience = 2
                        },
                        new
                        {
                            Id = new Guid("538c0f88-cd08-4dff-9a9e-0b612e436f03"),
                            AverageRating = 0.0,
                            IsAvailable = true,
                            UserId = new Guid("b0209e85-b41c-472b-a767-037253b72665"),
                            YearsOfExperience = 0
                        });
                });

            modelBuilder.Entity("FitnessTrackingApp.Data.Models.WeeklyPlan", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CardioSessionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("GoalPlanId")
                        .HasColumnType("bigint");

                    b.Property<long>("MacroId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Week")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CardioSessionId");

                    b.HasIndex("GoalPlanId");

                    b.HasIndex("MacroId");

                    b.HasIndex("Week", "GoalPlanId")
                        .IsUnique();

                    b.ToTable("WeeklyPlans");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CardioSessionId = 1L,
                            EndDate = new DateTime(2024, 12, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GoalPlanId = 1L,
                            MacroId = 1L,
                            StartDate = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Week = 1
                        },
                        new
                        {
                            Id = 2L,
                            CardioSessionId = 2L,
                            EndDate = new DateTime(2024, 12, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GoalPlanId = 1L,
                            MacroId = 2L,
                            StartDate = new DateTime(2024, 12, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Week = 2
                        },
                        new
                        {
                            Id = 3L,
                            CardioSessionId = 3L,
                            EndDate = new DateTime(2024, 12, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GoalPlanId = 1L,
                            MacroId = 3L,
                            StartDate = new DateTime(2024, 12, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Week = 3
                        },
                        new
                        {
                            Id = 4L,
                            CardioSessionId = 4L,
                            EndDate = new DateTime(2025, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GoalPlanId = 1L,
                            MacroId = 4L,
                            StartDate = new DateTime(2025, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Week = 4
                        },
                        new
                        {
                            Id = 5L,
                            CardioSessionId = 5L,
                            EndDate = new DateTime(2025, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GoalPlanId = 1L,
                            MacroId = 5L,
                            StartDate = new DateTime(2025, 1, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Week = 5
                        },
                        new
                        {
                            Id = 6L,
                            CardioSessionId = 6L,
                            EndDate = new DateTime(2025, 1, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GoalPlanId = 1L,
                            MacroId = 6L,
                            StartDate = new DateTime(2025, 1, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Week = 6
                        },
                        new
                        {
                            Id = 7L,
                            CardioSessionId = 7L,
                            EndDate = new DateTime(2025, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GoalPlanId = 1L,
                            MacroId = 7L,
                            StartDate = new DateTime(2025, 1, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Week = 7
                        },
                        new
                        {
                            Id = 8L,
                            CardioSessionId = 8L,
                            EndDate = new DateTime(2025, 2, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GoalPlanId = 1L,
                            MacroId = 8L,
                            StartDate = new DateTime(2025, 2, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Week = 8
                        },
                        new
                        {
                            Id = 9L,
                            CardioSessionId = 9L,
                            EndDate = new DateTime(2025, 2, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GoalPlanId = 1L,
                            MacroId = 9L,
                            StartDate = new DateTime(2025, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Week = 9
                        },
                        new
                        {
                            Id = 10L,
                            CardioSessionId = 10L,
                            EndDate = new DateTime(2025, 2, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GoalPlanId = 1L,
                            MacroId = 10L,
                            StartDate = new DateTime(2025, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Week = 10
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FitnessTrackingApp.Data.Models.BodyWeightGoal", b =>
                {
                    b.HasOne("FitnessTrackingApp.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("FitnessTrackingApp.Data.Models.BodyWeightLog", b =>
                {
                    b.HasOne("FitnessTrackingApp.Data.Models.WeeklyPlan", "WeeklyPlan")
                        .WithMany("BodyWeightLogs")
                        .HasForeignKey("WeeklyPlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("WeeklyPlan");
                });

            modelBuilder.Entity("FitnessTrackingApp.Data.Models.CustomerDetails", b =>
                {
                    b.HasOne("FitnessTrackingApp.Data.Models.GoalPlan", "GoalPlan")
                        .WithOne("CustomerDetails")
                        .HasForeignKey("FitnessTrackingApp.Data.Models.CustomerDetails", "GoalPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GoalPlan");
                });

            modelBuilder.Entity("FitnessTrackingApp.Data.Models.GoalPlan", b =>
                {
                    b.HasOne("FitnessTrackingApp.Data.Models.Trainer", "Trainer")
                        .WithMany("GoalPlans")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FitnessTrackingApp.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("FitnessTrackingApp.Data.Models.Trainer", b =>
                {
                    b.HasOne("FitnessTrackingApp.Data.Models.ApplicationUser", "User")
                        .WithOne()
                        .HasForeignKey("FitnessTrackingApp.Data.Models.Trainer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitnessTrackingApp.Data.Models.WeeklyPlan", b =>
                {
                    b.HasOne("FitnessTrackingApp.Data.Models.CardioSession", "CardioSession")
                        .WithMany()
                        .HasForeignKey("CardioSessionId");

                    b.HasOne("FitnessTrackingApp.Data.Models.GoalPlan", "GoalPlan")
                        .WithMany("WeeklyPlans")
                        .HasForeignKey("GoalPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessTrackingApp.Data.Models.Macro", "Macro")
                        .WithMany()
                        .HasForeignKey("MacroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardioSession");

                    b.Navigation("GoalPlan");

                    b.Navigation("Macro");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("FitnessTrackingApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("FitnessTrackingApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessTrackingApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("FitnessTrackingApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FitnessTrackingApp.Data.Models.GoalPlan", b =>
                {
                    b.Navigation("CustomerDetails")
                        .IsRequired();

                    b.Navigation("WeeklyPlans");
                });

            modelBuilder.Entity("FitnessTrackingApp.Data.Models.Trainer", b =>
                {
                    b.Navigation("GoalPlans");
                });

            modelBuilder.Entity("FitnessTrackingApp.Data.Models.WeeklyPlan", b =>
                {
                    b.Navigation("BodyWeightLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
